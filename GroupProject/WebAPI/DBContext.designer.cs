#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebAPI
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="BagStore")]
	public partial class DBContextDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBagTBL(BagTBL instance);
    partial void UpdateBagTBL(BagTBL instance);
    partial void DeleteBagTBL(BagTBL instance);
    partial void InsertCategoryTBL(CategoryTBL instance);
    partial void UpdateCategoryTBL(CategoryTBL instance);
    partial void DeleteCategoryTBL(CategoryTBL instance);
    partial void InsertOrderDetailTBL(OrderDetailTBL instance);
    partial void UpdateOrderDetailTBL(OrderDetailTBL instance);
    partial void DeleteOrderDetailTBL(OrderDetailTBL instance);
    partial void InsertOrderTBL(OrderTBL instance);
    partial void UpdateOrderTBL(OrderTBL instance);
    partial void DeleteOrderTBL(OrderTBL instance);
    partial void InsertAccountTBL(AccountTBL instance);
    partial void UpdateAccountTBL(AccountTBL instance);
    partial void DeleteAccountTBL(AccountTBL instance);
    #endregion
		
		public DBContextDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["BagStoreConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DBContextDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBContextDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBContextDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBContextDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<BagTBL> BagTBLs
		{
			get
			{
				return this.GetTable<BagTBL>();
			}
		}
		
		public System.Data.Linq.Table<CategoryTBL> CategoryTBLs
		{
			get
			{
				return this.GetTable<CategoryTBL>();
			}
		}
		
		public System.Data.Linq.Table<OrderDetailTBL> OrderDetailTBLs
		{
			get
			{
				return this.GetTable<OrderDetailTBL>();
			}
		}
		
		public System.Data.Linq.Table<OrderTBL> OrderTBLs
		{
			get
			{
				return this.GetTable<OrderTBL>();
			}
		}
		
		public System.Data.Linq.Table<AccountTBL> AccountTBLs
		{
			get
			{
				return this.GetTable<AccountTBL>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.BagTBL")]
	public partial class BagTBL : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _bagID;
		
		private string _bagName;
		
		private string _image;
		
		private string _description;
		
		private string _origin;
		
		private string _size;
		
		private System.Nullable<decimal> _price;
		
		private System.Nullable<int> _quantity;
		
		private string _status;
		
		private System.Nullable<System.DateTime> _createDate;
		
		private string _bagCID;
		
		private EntitySet<OrderDetailTBL> _OrderDetailTBLs;
		
		private EntityRef<CategoryTBL> _CategoryTBL;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnbagIDChanging(string value);
    partial void OnbagIDChanged();
    partial void OnbagNameChanging(string value);
    partial void OnbagNameChanged();
    partial void OnimageChanging(string value);
    partial void OnimageChanged();
    partial void OndescriptionChanging(string value);
    partial void OndescriptionChanged();
    partial void OnoriginChanging(string value);
    partial void OnoriginChanged();
    partial void OnsizeChanging(string value);
    partial void OnsizeChanged();
    partial void OnpriceChanging(System.Nullable<decimal> value);
    partial void OnpriceChanged();
    partial void OnquantityChanging(System.Nullable<int> value);
    partial void OnquantityChanged();
    partial void OnstatusChanging(string value);
    partial void OnstatusChanged();
    partial void OncreateDateChanging(System.Nullable<System.DateTime> value);
    partial void OncreateDateChanged();
    partial void OnbagCIDChanging(string value);
    partial void OnbagCIDChanged();
    #endregion
		
		public BagTBL()
		{
			this._OrderDetailTBLs = new EntitySet<OrderDetailTBL>(new Action<OrderDetailTBL>(this.attach_OrderDetailTBLs), new Action<OrderDetailTBL>(this.detach_OrderDetailTBLs));
			this._CategoryTBL = default(EntityRef<CategoryTBL>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bagID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string bagID
		{
			get
			{
				return this._bagID;
			}
			set
			{
				if ((this._bagID != value))
				{
					this.OnbagIDChanging(value);
					this.SendPropertyChanging();
					this._bagID = value;
					this.SendPropertyChanged("bagID");
					this.OnbagIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bagName", DbType="VarChar(100)")]
		public string bagName
		{
			get
			{
				return this._bagName;
			}
			set
			{
				if ((this._bagName != value))
				{
					this.OnbagNameChanging(value);
					this.SendPropertyChanging();
					this._bagName = value;
					this.SendPropertyChanged("bagName");
					this.OnbagNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_image", DbType="VarChar(250)")]
		public string image
		{
			get
			{
				return this._image;
			}
			set
			{
				if ((this._image != value))
				{
					this.OnimageChanging(value);
					this.SendPropertyChanging();
					this._image = value;
					this.SendPropertyChanged("image");
					this.OnimageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_description", DbType="VarChar(250)")]
		public string description
		{
			get
			{
				return this._description;
			}
			set
			{
				if ((this._description != value))
				{
					this.OndescriptionChanging(value);
					this.SendPropertyChanging();
					this._description = value;
					this.SendPropertyChanged("description");
					this.OndescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_origin", DbType="VarChar(100)")]
		public string origin
		{
			get
			{
				return this._origin;
			}
			set
			{
				if ((this._origin != value))
				{
					this.OnoriginChanging(value);
					this.SendPropertyChanging();
					this._origin = value;
					this.SendPropertyChanged("origin");
					this.OnoriginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_size", DbType="VarChar(100)")]
		public string size
		{
			get
			{
				return this._size;
			}
			set
			{
				if ((this._size != value))
				{
					this.OnsizeChanging(value);
					this.SendPropertyChanging();
					this._size = value;
					this.SendPropertyChanged("size");
					this.OnsizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this.OnpriceChanging(value);
					this.SendPropertyChanging();
					this._price = value;
					this.SendPropertyChanged("price");
					this.OnpriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_quantity", DbType="Int")]
		public System.Nullable<int> quantity
		{
			get
			{
				return this._quantity;
			}
			set
			{
				if ((this._quantity != value))
				{
					this.OnquantityChanging(value);
					this.SendPropertyChanging();
					this._quantity = value;
					this.SendPropertyChanged("quantity");
					this.OnquantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="VarChar(50)")]
		public string status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_createDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> createDate
		{
			get
			{
				return this._createDate;
			}
			set
			{
				if ((this._createDate != value))
				{
					this.OncreateDateChanging(value);
					this.SendPropertyChanging();
					this._createDate = value;
					this.SendPropertyChanged("createDate");
					this.OncreateDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bagCID", DbType="VarChar(10)")]
		public string bagCID
		{
			get
			{
				return this._bagCID;
			}
			set
			{
				if ((this._bagCID != value))
				{
					if (this._CategoryTBL.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnbagCIDChanging(value);
					this.SendPropertyChanging();
					this._bagCID = value;
					this.SendPropertyChanged("bagCID");
					this.OnbagCIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BagTBL_OrderDetailTBL", Storage="_OrderDetailTBLs", ThisKey="bagID", OtherKey="bagID")]
		public EntitySet<OrderDetailTBL> OrderDetailTBLs
		{
			get
			{
				return this._OrderDetailTBLs;
			}
			set
			{
				this._OrderDetailTBLs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CategoryTBL_BagTBL", Storage="_CategoryTBL", ThisKey="bagCID", OtherKey="bagCID", IsForeignKey=true)]
		public CategoryTBL CategoryTBL
		{
			get
			{
				return this._CategoryTBL.Entity;
			}
			set
			{
				CategoryTBL previousValue = this._CategoryTBL.Entity;
				if (((previousValue != value) 
							|| (this._CategoryTBL.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CategoryTBL.Entity = null;
						previousValue.BagTBLs.Remove(this);
					}
					this._CategoryTBL.Entity = value;
					if ((value != null))
					{
						value.BagTBLs.Add(this);
						this._bagCID = value.bagCID;
					}
					else
					{
						this._bagCID = default(string);
					}
					this.SendPropertyChanged("CategoryTBL");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderDetailTBLs(OrderDetailTBL entity)
		{
			this.SendPropertyChanging();
			entity.BagTBL = this;
		}
		
		private void detach_OrderDetailTBLs(OrderDetailTBL entity)
		{
			this.SendPropertyChanging();
			entity.BagTBL = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CategoryTBL")]
	public partial class CategoryTBL : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _bagCID;
		
		private string _name;
		
		private EntitySet<BagTBL> _BagTBLs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnbagCIDChanging(string value);
    partial void OnbagCIDChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    #endregion
		
		public CategoryTBL()
		{
			this._BagTBLs = new EntitySet<BagTBL>(new Action<BagTBL>(this.attach_BagTBLs), new Action<BagTBL>(this.detach_BagTBLs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bagCID", DbType="VarChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string bagCID
		{
			get
			{
				return this._bagCID;
			}
			set
			{
				if ((this._bagCID != value))
				{
					this.OnbagCIDChanging(value);
					this.SendPropertyChanging();
					this._bagCID = value;
					this.SendPropertyChanged("bagCID");
					this.OnbagCIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_name", DbType="VarChar(100)")]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CategoryTBL_BagTBL", Storage="_BagTBLs", ThisKey="bagCID", OtherKey="bagCID")]
		public EntitySet<BagTBL> BagTBLs
		{
			get
			{
				return this._BagTBLs;
			}
			set
			{
				this._BagTBLs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_BagTBLs(BagTBL entity)
		{
			this.SendPropertyChanging();
			entity.CategoryTBL = this;
		}
		
		private void detach_BagTBLs(BagTBL entity)
		{
			this.SendPropertyChanging();
			entity.CategoryTBL = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderDetailTBL")]
	public partial class OrderDetailTBL : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _orderDetailID;
		
		private string _orderID;
		
		private string _bagID;
		
		private System.Nullable<int> _quantity;
		
		private System.Nullable<decimal> _price;
		
		private EntityRef<BagTBL> _BagTBL;
		
		private EntityRef<OrderTBL> _OrderTBL;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnorderDetailIDChanging(string value);
    partial void OnorderDetailIDChanged();
    partial void OnorderIDChanging(string value);
    partial void OnorderIDChanged();
    partial void OnbagIDChanging(string value);
    partial void OnbagIDChanged();
    partial void OnquantityChanging(System.Nullable<int> value);
    partial void OnquantityChanged();
    partial void OnpriceChanging(System.Nullable<decimal> value);
    partial void OnpriceChanged();
    #endregion
		
		public OrderDetailTBL()
		{
			this._BagTBL = default(EntityRef<BagTBL>);
			this._OrderTBL = default(EntityRef<OrderTBL>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_orderDetailID", DbType="VarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string orderDetailID
		{
			get
			{
				return this._orderDetailID;
			}
			set
			{
				if ((this._orderDetailID != value))
				{
					this.OnorderDetailIDChanging(value);
					this.SendPropertyChanging();
					this._orderDetailID = value;
					this.SendPropertyChanged("orderDetailID");
					this.OnorderDetailIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_orderID", DbType="VarChar(100)")]
		public string orderID
		{
			get
			{
				return this._orderID;
			}
			set
			{
				if ((this._orderID != value))
				{
					if (this._OrderTBL.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnorderIDChanging(value);
					this.SendPropertyChanging();
					this._orderID = value;
					this.SendPropertyChanged("orderID");
					this.OnorderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_bagID", DbType="VarChar(10)")]
		public string bagID
		{
			get
			{
				return this._bagID;
			}
			set
			{
				if ((this._bagID != value))
				{
					if (this._BagTBL.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnbagIDChanging(value);
					this.SendPropertyChanging();
					this._bagID = value;
					this.SendPropertyChanged("bagID");
					this.OnbagIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_quantity", DbType="Int")]
		public System.Nullable<int> quantity
		{
			get
			{
				return this._quantity;
			}
			set
			{
				if ((this._quantity != value))
				{
					this.OnquantityChanging(value);
					this.SendPropertyChanging();
					this._quantity = value;
					this.SendPropertyChanged("quantity");
					this.OnquantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_price", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> price
		{
			get
			{
				return this._price;
			}
			set
			{
				if ((this._price != value))
				{
					this.OnpriceChanging(value);
					this.SendPropertyChanging();
					this._price = value;
					this.SendPropertyChanged("price");
					this.OnpriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="BagTBL_OrderDetailTBL", Storage="_BagTBL", ThisKey="bagID", OtherKey="bagID", IsForeignKey=true)]
		public BagTBL BagTBL
		{
			get
			{
				return this._BagTBL.Entity;
			}
			set
			{
				BagTBL previousValue = this._BagTBL.Entity;
				if (((previousValue != value) 
							|| (this._BagTBL.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BagTBL.Entity = null;
						previousValue.OrderDetailTBLs.Remove(this);
					}
					this._BagTBL.Entity = value;
					if ((value != null))
					{
						value.OrderDetailTBLs.Add(this);
						this._bagID = value.bagID;
					}
					else
					{
						this._bagID = default(string);
					}
					this.SendPropertyChanged("BagTBL");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrderTBL_OrderDetailTBL", Storage="_OrderTBL", ThisKey="orderID", OtherKey="orderID", IsForeignKey=true)]
		public OrderTBL OrderTBL
		{
			get
			{
				return this._OrderTBL.Entity;
			}
			set
			{
				OrderTBL previousValue = this._OrderTBL.Entity;
				if (((previousValue != value) 
							|| (this._OrderTBL.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OrderTBL.Entity = null;
						previousValue.OrderDetailTBLs.Remove(this);
					}
					this._OrderTBL.Entity = value;
					if ((value != null))
					{
						value.OrderDetailTBLs.Add(this);
						this._orderID = value.orderID;
					}
					else
					{
						this._orderID = default(string);
					}
					this.SendPropertyChanged("OrderTBL");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderTBL")]
	public partial class OrderTBL : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _orderID;
		
		private string _username;
		
		private string _paymentMethod;
		
		private System.Nullable<System.DateTime> _dateOrder;
		
		private System.Nullable<decimal> _total;
		
		private string _status;
		
		private EntitySet<OrderDetailTBL> _OrderDetailTBLs;
		
		private EntityRef<AccountTBL> _AccountTBL;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnorderIDChanging(string value);
    partial void OnorderIDChanged();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnpaymentMethodChanging(string value);
    partial void OnpaymentMethodChanged();
    partial void OndateOrderChanging(System.Nullable<System.DateTime> value);
    partial void OndateOrderChanged();
    partial void OntotalChanging(System.Nullable<decimal> value);
    partial void OntotalChanged();
    partial void OnstatusChanging(string value);
    partial void OnstatusChanged();
    #endregion
		
		public OrderTBL()
		{
			this._OrderDetailTBLs = new EntitySet<OrderDetailTBL>(new Action<OrderDetailTBL>(this.attach_OrderDetailTBLs), new Action<OrderDetailTBL>(this.detach_OrderDetailTBLs));
			this._AccountTBL = default(EntityRef<AccountTBL>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_orderID", DbType="VarChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string orderID
		{
			get
			{
				return this._orderID;
			}
			set
			{
				if ((this._orderID != value))
				{
					this.OnorderIDChanging(value);
					this.SendPropertyChanging();
					this._orderID = value;
					this.SendPropertyChanged("orderID");
					this.OnorderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="VarChar(50)")]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					if (this._AccountTBL.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_paymentMethod", DbType="VarChar(50)")]
		public string paymentMethod
		{
			get
			{
				return this._paymentMethod;
			}
			set
			{
				if ((this._paymentMethod != value))
				{
					this.OnpaymentMethodChanging(value);
					this.SendPropertyChanging();
					this._paymentMethod = value;
					this.SendPropertyChanged("paymentMethod");
					this.OnpaymentMethodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dateOrder", DbType="DateTime")]
		public System.Nullable<System.DateTime> dateOrder
		{
			get
			{
				return this._dateOrder;
			}
			set
			{
				if ((this._dateOrder != value))
				{
					this.OndateOrderChanging(value);
					this.SendPropertyChanging();
					this._dateOrder = value;
					this.SendPropertyChanged("dateOrder");
					this.OndateOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_total", DbType="Decimal(18,2)")]
		public System.Nullable<decimal> total
		{
			get
			{
				return this._total;
			}
			set
			{
				if ((this._total != value))
				{
					this.OntotalChanging(value);
					this.SendPropertyChanging();
					this._total = value;
					this.SendPropertyChanged("total");
					this.OntotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_status", DbType="VarChar(50)")]
		public string status
		{
			get
			{
				return this._status;
			}
			set
			{
				if ((this._status != value))
				{
					this.OnstatusChanging(value);
					this.SendPropertyChanging();
					this._status = value;
					this.SendPropertyChanged("status");
					this.OnstatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="OrderTBL_OrderDetailTBL", Storage="_OrderDetailTBLs", ThisKey="orderID", OtherKey="orderID")]
		public EntitySet<OrderDetailTBL> OrderDetailTBLs
		{
			get
			{
				return this._OrderDetailTBLs;
			}
			set
			{
				this._OrderDetailTBLs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountTBL_OrderTBL", Storage="_AccountTBL", ThisKey="username", OtherKey="username", IsForeignKey=true)]
		public AccountTBL AccountTBL
		{
			get
			{
				return this._AccountTBL.Entity;
			}
			set
			{
				AccountTBL previousValue = this._AccountTBL.Entity;
				if (((previousValue != value) 
							|| (this._AccountTBL.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccountTBL.Entity = null;
						previousValue.OrderTBLs.Remove(this);
					}
					this._AccountTBL.Entity = value;
					if ((value != null))
					{
						value.OrderTBLs.Add(this);
						this._username = value.username;
					}
					else
					{
						this._username = default(string);
					}
					this.SendPropertyChanged("AccountTBL");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderDetailTBLs(OrderDetailTBL entity)
		{
			this.SendPropertyChanging();
			entity.OrderTBL = this;
		}
		
		private void detach_OrderDetailTBLs(OrderDetailTBL entity)
		{
			this.SendPropertyChanging();
			entity.OrderTBL = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccountTBL")]
	public partial class AccountTBL : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _username;
		
		private string _password;
		
		private string _phoneNumber;
		
		private string _fullName;
		
		private string _role;
		
		private string _address;
		
		private System.Nullable<bool> _isActive;
		
		private EntitySet<OrderTBL> _OrderTBLs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    partial void OnphoneNumberChanging(string value);
    partial void OnphoneNumberChanged();
    partial void OnfullNameChanging(string value);
    partial void OnfullNameChanged();
    partial void OnroleChanging(string value);
    partial void OnroleChanged();
    partial void OnaddressChanging(string value);
    partial void OnaddressChanged();
    partial void OnisActiveChanging(System.Nullable<bool> value);
    partial void OnisActiveChanged();
    #endregion
		
		public AccountTBL()
		{
			this._OrderTBLs = new EntitySet<OrderTBL>(new Action<OrderTBL>(this.attach_OrderTBLs), new Action<OrderTBL>(this.detach_OrderTBLs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="VarChar(50)")]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_phoneNumber", DbType="VarChar(20)")]
		public string phoneNumber
		{
			get
			{
				return this._phoneNumber;
			}
			set
			{
				if ((this._phoneNumber != value))
				{
					this.OnphoneNumberChanging(value);
					this.SendPropertyChanging();
					this._phoneNumber = value;
					this.SendPropertyChanged("phoneNumber");
					this.OnphoneNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_fullName", DbType="VarChar(50)")]
		public string fullName
		{
			get
			{
				return this._fullName;
			}
			set
			{
				if ((this._fullName != value))
				{
					this.OnfullNameChanging(value);
					this.SendPropertyChanging();
					this._fullName = value;
					this.SendPropertyChanged("fullName");
					this.OnfullNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_role", DbType="VarChar(50)")]
		public string role
		{
			get
			{
				return this._role;
			}
			set
			{
				if ((this._role != value))
				{
					this.OnroleChanging(value);
					this.SendPropertyChanging();
					this._role = value;
					this.SendPropertyChanged("role");
					this.OnroleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address", DbType="VarChar(500)")]
		public string address
		{
			get
			{
				return this._address;
			}
			set
			{
				if ((this._address != value))
				{
					this.OnaddressChanging(value);
					this.SendPropertyChanging();
					this._address = value;
					this.SendPropertyChanged("address");
					this.OnaddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isActive", DbType="Bit")]
		public System.Nullable<bool> isActive
		{
			get
			{
				return this._isActive;
			}
			set
			{
				if ((this._isActive != value))
				{
					this.OnisActiveChanging(value);
					this.SendPropertyChanging();
					this._isActive = value;
					this.SendPropertyChanged("isActive");
					this.OnisActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccountTBL_OrderTBL", Storage="_OrderTBLs", ThisKey="username", OtherKey="username")]
		public EntitySet<OrderTBL> OrderTBLs
		{
			get
			{
				return this._OrderTBLs;
			}
			set
			{
				this._OrderTBLs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderTBLs(OrderTBL entity)
		{
			this.SendPropertyChanging();
			entity.AccountTBL = this;
		}
		
		private void detach_OrderTBLs(OrderTBL entity)
		{
			this.SendPropertyChanging();
			entity.AccountTBL = null;
		}
	}
}
#pragma warning restore 1591
